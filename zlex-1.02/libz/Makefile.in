#Makefile.in produced automatically using GNU-m4.

#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
docdir=			$(datadir)/doc

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz



#SUFFIX RULES.
.SUFFIXES:

.SUFFIXES:	.o .c .y .l

.c.o:
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $<

.c:
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $< $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*


#The following targets use ZYACC_PATH and ZYACC_SKEL_DIR.  If ZYACC_PATH is
#defined, it must end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.

ZYACCFLAGS=	-d -v

.y.c:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c

.y.o:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c
	
.y:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c

#The following targets use ZLEX_PATH and ZLEX_SEARCH_PATH.  If ZLEX_PATH is
#defined, it must end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.
.l.c:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c

.l.o:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.l:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c




#Main target to be built in this directory.
TARGET=		libz.a

#FILE DESCRIPTIONS
#Human-generated C files.
C_SRC_FILES= \
  arcutx.c ardel.c ardelx.c arfreeze.c argrow.c argrowx.c armem.c arreset.c \
  bsadd.c bsassign.c bscomp.c bscopy.c bsdel.c bsdiff.c bsempty.c \
  bsfprint.c bshshsum.c bsinbset.c bsinit.c bsintrsc.c bsmake.c \
  bsnew.c bsnext.c bsprint.c bsrange.c bsrm.c bssize.c bssubset.c \
  bstest.c bsunary.c bsunion.c \
  error.c errorz.c \
  freelist.c \
  idsfail.c idsget.c idsinit.c idsintrn.c idslen.c idsstrng.c \
  isadd.c isassign.c ischown.c iscomp.c iscopy.c \
  isdel.c isdiff.c isdebug.c isempty.c \
  isfprint.c ishshsum.c isiniset.c isinit.c isintrsc.c ismake.c \
  isnew.c isnext.c isprint.c isrange.c isrm.c issize.c issubset.c \
  istest.c isunary.c isunion.c \
  libzerr.c \
  memcheck.c memdebug.c memtest.c \
  po01fn.c po2info.c pochklng.c pochrfn.c pochrfn0.c pochrfn1.c poerr.c \
  pohelp.c pohlpfmt.c pointfn0.c pointfn1.c \
  polngfn0.c polngfn1.c pooptdef.c \
  poparse.c poshift.c poshrfn0.c poshrfn1.c postrarg.c postrfn.c postvfn.c \
  potest.c potstchk.c potstinf.c potstop0.c potstmk.c \
  ssadd.c sscat.c ssdel.c ssinit.c ssmore.c sspop.c \
  tiadd.c tidel.c tigetid.c tiidlen.c tiidtext.c tiinit.c \
  tipop.c titest.c titxtlen.c \
  utcesc.c utflfind.c utlnglen.c utopen.c utlg2.c utread.c \
  utstrlo.c utstrlon.c utstrnst.c utstrup.c utstrupn.c utsuffix.c \
  utfltest.c \
  vfprintf.c

#Computer-generated C files.
C_NON_SRC_FILES= \
  potstopt.c
 
#All C files.
CFILES= \
  $(C_SRC_FILES) $(C_NON_SRC_FILES)

#Human-generated header files.
H_SRC_FILES= \
  area.h autobuf.h bset.h bsetp.h ccport.h \
  error.h errorz.h freelist.h \
  memalloc.h ids.h idsp.h iset.h isetp.h osport.h optp.h \
  parseopt.h sspacep.h strspace.h textid.h textidp.h \
  zutil.h xassert.h

#Computer-generated header files.
H_NON_SRC_FILES= 
 
#All header files.
HFILES= \
  $(H_SRC_FILES) $(H_NON_SRC_FILES)

#Special debug OFILES, built using special DFLAGS.
DEBUG_ISET_OFILES= \
    disadd.o disassign.o discomp.o discopy.o disdel.o disdiff.o \
    disempty.o disfprint.o dishshsum.o \
    disiniset.o disintrsc.o dismake.o \
    disnew.o disnext.o disprint.o disrange.o disrm.o dissize.o dissubset.o \
    disunary.o disunion.o 

#Object files to be build.
OFILES= \
    arcutx.o ardel.o ardelx.o arfreeze.o argrow.o argrowx.o armem.o arreset.o \
    bsadd.o bsassign.o bscomp.o bscopy.o bsdel.o bsdiff.o bsempty.o \
    bsfprint.o bshshsum.o bsinbset.o bsinit.o bsintrsc.o bsmake.o \
    bsnew.o bsnext.o bsprint.o bsrange.o bsrm.o bssize.o bssubset.o \
    bsunary.o bsunion.o \
    error.o \
    errorz.o \
    freelist.o \
    idsfail.o idsget.o idsinit.o idsintrn.o idslen.o idsstrng.o \
    isadd.o isassign.o ischown.o iscomp.o iscopy.o isdebug.o isdel.o isdiff.o \
    isempty.o isfprint.o ishshsum.o isiniset.o isinit.o isintrsc.o ismake.o \
    isnew.o isnext.o isprint.o isrange.o isrm.o issize.o issubset.o \
    isunary.o isunion.o \
    libzerr.o \
    memcheck.o memdebug.o \
    po01fn.o po2info.o pochklng.o pochrfn.o pochrfn0.o pochrfn1.o poerr.o \
    pohelp.o pohlpfmt.o pointfn0.o pointfn1.o \
    polngfn0.o polngfn1.o pooptdef.o \
    poparse.o poshift.o poshrfn0.o poshrfn1.o postrarg.o postrfn.o \
    postvfn.o \
    ssadd.o sscat.o ssdel.o ssinit.o ssmore.o sspop.o \
    tiadd.o tidel.o tigetid.o tiidlen.o tiidtext.o tiinit.o \
    tipop.o titxtlen.o \
    utcesc.o utflfind.o utlnglen.o utopen.o utlg2.o utread.o \
    utstrlo.o utstrlon.o utstrnst.o utstrup.o utstrupn.o utsuffix.o \
    vfprintf.o \
    $(DEBUG_ISET_OFILES)
#All human-generated files to be distributed.
SRC_FILES= \
  $(C_SRC_FILES) $(H_SRC_FILES) \
  Makefile.m4 README \
  bstest.in ertest.in istest.in memtest.in \
  potest.in potstinf.in titest.in utfltest.in 

#All computer-generated files to be distributed.
NON_SRC_FILES= \
  $(C_NON_SRC_FILES) $(H_NON_SRC_FILES) \
  Makefile.in DEPEND \
  bstest.log ertest.log istest.log memdebug.log memtest.log \
  potest.log potstinf.log titest.log utfltest.log 

DIST_FILES= \
  $(SRC_FILES) $(NON_SRC_FILES)

TESTS= bstest ertest istest memtest potest potstinf titest utfltest

#PUBLIC TARGETS
all:		$(TARGET)

install:	$(TARGET)
		echo Nothing to be installed for libz.

uninstall:
		echo Nothing to be uninstalled for libz.

$(TARGET):	$(OFILES)
		$(AR) r $@ $?
		$(RANLIB) $@

$(DEBUG_ISET_OFILES):
		debugCFile=`basename $@ '.o'`.c; \
		srcCFile=`echo $@ | sed 's/^.//;s/o$$/c/'`; \
		$(LN) $$srcCFile $$debugCFile; \
		$(CC) -c $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) \
		    -DDEBUG_ISET $(DFLAGS) $$debugCFile; \
		$(RM) $$debugCFile


check:		$(TESTS) 
		@-for t in $(TESTS) ; \
		do \
		  echo -n Checking $$t ... ; \
		  FIND_FILE_PATH=/usr/include \
		  $$t $$t.in <$$t.in >tmp1.$$$$ 2>tmp2.$$$$ ; \
		  cat tmp1.$$$$ tmp2.$$$$ >tmp.$$$$ ; \
		  $(RM) tmp1.$$$$ tmp2.$$$$ ; \
		  if test $$t = memtest ; \
		  then \
		    cat memDebug.log tmp.$$$$ >tmp1.$$$$ ; \
		    sed -e "s/\`[0-9a-fA-F]*\'/\`PTR\'/" \
			tmp1.$$$$ >tmp.$$$$ ; \
		    $(RM) tmp1.$$$$ ; \
		  fi ; \
		  if cmp $$t.log tmp.$$$$ >/dev/null 2>/dev/null ; \
		  then \
		    echo OK; $(RM) tmp.$$$$ ; \
		  else \
		    echo FAILED. ; \
		    if test -f $$t.msg ; \
		    then \
		      cat $$t.msg ; \
		    fi ; \
		    mv tmp.$$$$ $$t.ERR ; \
		    echo Suggest diff\'ing erroneous log in $$t.ERR with \
			 expected log in $$t.log. ; \
		  fi ; \
		done

potstinf:	potstinf.o
		$(CC) $(LDFLAGS) potstinf.o $(ZLIBS) $(XLIBS)  -o $@ 

potstmk:	potstmk.o
		$(CC) $(LDFLAGS) potstmk.o $(ZLIBS) $(XLIBS)  -o $@ 

potstopt.c:	potstmk
		./potstmk >$@

#CLEANING TARGETS

#Remove any garbage.
clean:		FORCE
		$(RM) *.o *~ core t.* t t[0-9]* *.bak lex.yy.c *.tmp tmp.* \
		      *.output 

#Remove all files not in distribution.
distclean:	clean FORCE
		$(RM) $(TARGET) Makefile makefile


#Remove all non-source files.  May need special tools to rebuild.
maintainer-clean: 	distclean FORCE
		$(RM) $(NON_SRC_FILES)

FORCE:


Makefile.in:	Makefile.m4 DEPEND FORCE
		$(MAKE_MF_IN)

$(TESTS):	$(TARGET)

#All the object files depend on config.h.  Not put into automatic
#dependencies as we don't know the directory for config.h till build-time.
$(OFILES):	$(builddir)/config.h

#Manual dependencies for DEBUG_ISET_OFILES.
$(DEBUG_ISET_OFILES):		isetp.h iset.h
disadd.o:	isadd.c 
disassign.o:	isassign.c 
discomp.o:	iscomp.c 
discopy.o:	iscopy.c 
disdel.o:	isdel.c 
disdiff.o:	isdiff.c 
disempty.o:	isempty.c 
disfprint.o:	isfprint.c 
dishshsum.o:	ishshsum.c 
disiniset.o:	isiniset.c 
disinit.o:	isinit.c 
disintrsc.o:	isintrsc.c 
dismake.o:	ismake.c 
disnew.o:	isnew.c 
disnext.o:	isnext.c 
disprint.o:	isprint.c 
disrange.o:	isrange.c 
disrm.o:	isrm.c 
dissize.o:	issize.c 
dissubset.o:	issubset.c 
disunary.o:	isunary.c 
disunion.o:	isunion.c 


#Dependency generation.
#Make dependencies to insert into Makefile.in.
DEPEND:		$(CFILES) $(HFILES)
		echo "#Automatically generated dependencies." >$(srcdir)/DEPEND
		$(DEPEND_CMD) $(CFILES) >>$(srcdir)/DEPEND



#Make distribution in $(topdir)/$(DIST_DIR).
dist:		$(NON_SRC_FILES)
		@for f in $(DIST_FILES) ; \
		do \
		  $(LN) $(srcdir)/$$f $(topdir)/$(DIST_DIR)/$$f ; \
		done



#Automatically generated dependencies.
arcutx.o: arcutx.c area.h ccport.h memalloc.h
ardel.o: ardel.c area.h ccport.h memalloc.h
ardelx.o: ardelx.c area.h ccport.h memalloc.h
arfreeze.o: arfreeze.c area.h ccport.h memalloc.h
argrow.o: argrow.c area.h ccport.h errorz.h memalloc.h
argrowx.o: argrowx.c area.h ccport.h errorz.h memalloc.h
armem.o: armem.c area.h ccport.h memalloc.h
arreset.o: arreset.c area.h ccport.h memalloc.h
bsadd.o: bsadd.c bsetp.h area.h ccport.h bset.h memalloc.h
bsassign.o: bsassign.c bsetp.h area.h ccport.h bset.h memalloc.h
bscomp.o: bscomp.c bsetp.h area.h ccport.h bset.h memalloc.h
bscopy.o: bscopy.c bsetp.h area.h ccport.h bset.h memalloc.h
bsdel.o: bsdel.c bsetp.h area.h ccport.h bset.h memalloc.h
bsdiff.o: bsdiff.c bsetp.h area.h ccport.h bset.h memalloc.h
bsempty.o: bsempty.c bsetp.h area.h ccport.h bset.h memalloc.h
bsfprint.o: bsfprint.c bsetp.h area.h ccport.h bset.h memalloc.h
bshshsum.o: bshshsum.c bsetp.h area.h ccport.h bset.h memalloc.h
bsinbset.o: bsinbset.c bsetp.h area.h ccport.h bset.h memalloc.h
bsinit.o: bsinit.c bsetp.h area.h ccport.h bset.h memalloc.h
bsintrsc.o: bsintrsc.c bsetp.h area.h ccport.h bset.h memalloc.h
bsmake.o: bsmake.c bsetp.h area.h ccport.h bset.h memalloc.h
bsnew.o: bsnew.c bsetp.h area.h ccport.h bset.h memalloc.h
bsnext.o: bsnext.c bsetp.h area.h ccport.h bset.h memalloc.h
bsprint.o: bsprint.c bsetp.h area.h ccport.h bset.h memalloc.h
bsrange.o: bsrange.c bsetp.h area.h ccport.h bset.h memalloc.h
bsrm.o: bsrm.c bsetp.h area.h ccport.h bset.h memalloc.h
bssize.o: bssize.c bsetp.h area.h ccport.h bset.h memalloc.h
bssubset.o: bssubset.c bsetp.h area.h ccport.h bset.h memalloc.h
bstest.o: bstest.c bset.h ccport.h
bsunary.o: bsunary.c bsetp.h area.h ccport.h bset.h memalloc.h
bsunion.o: bsunion.c bsetp.h area.h ccport.h bset.h memalloc.h
error.o: error.c error.h ccport.h errorz.h
errorz.o: errorz.c autobuf.h memalloc.h ccport.h errorz.h
freelist.o: freelist.c freelist.h ccport.h memalloc.h
idsfail.o: idsfail.c idsp.h ids.h ccport.h strspace.h textid.h
idsget.o: idsget.c idsp.h ids.h ccport.h strspace.h textid.h
idsinit.o: idsinit.c idsp.h ids.h ccport.h strspace.h textid.h
idsintrn.o: idsintrn.c idsp.h ids.h ccport.h strspace.h textid.h
idslen.o: idslen.c idsp.h ids.h ccport.h strspace.h textid.h
idsstrng.o: idsstrng.c idsp.h ids.h ccport.h strspace.h textid.h
isadd.o: isadd.c isetp.h ccport.h freelist.h iset.h
isassign.o: isassign.c isetp.h ccport.h freelist.h iset.h
ischown.o: ischown.c isetp.h ccport.h freelist.h iset.h
iscomp.o: iscomp.c isetp.h ccport.h freelist.h iset.h
iscopy.o: iscopy.c isetp.h ccport.h freelist.h iset.h
isdel.o: isdel.c isetp.h ccport.h freelist.h iset.h
isdiff.o: isdiff.c isetp.h ccport.h freelist.h iset.h
isdebug.o: isdebug.c isetp.h ccport.h freelist.h iset.h
isempty.o: isempty.c isetp.h ccport.h freelist.h iset.h
isfprint.o: isfprint.c isetp.h ccport.h freelist.h iset.h
ishshsum.o: ishshsum.c isetp.h ccport.h freelist.h iset.h
isiniset.o: isiniset.c isetp.h ccport.h freelist.h iset.h
isinit.o: isinit.c isetp.h ccport.h freelist.h iset.h
isintrsc.o: isintrsc.c isetp.h ccport.h freelist.h iset.h
ismake.o: ismake.c isetp.h ccport.h freelist.h iset.h
isnew.o: isnew.c isetp.h ccport.h freelist.h iset.h
isnext.o: isnext.c isetp.h ccport.h freelist.h iset.h
isprint.o: isprint.c isetp.h ccport.h freelist.h iset.h
isrange.o: isrange.c isetp.h ccport.h freelist.h iset.h
isrm.o: isrm.c isetp.h ccport.h freelist.h iset.h
issize.o: issize.c isetp.h ccport.h freelist.h iset.h
issubset.o: issubset.c isetp.h ccport.h freelist.h iset.h
istest.o: istest.c iset.h ccport.h
isunary.o: isunary.c isetp.h ccport.h freelist.h iset.h
isunion.o: isunion.c isetp.h ccport.h freelist.h iset.h
libzerr.o: libzerr.c errorz.h ccport.h
memcheck.o: memcheck.c errorz.h ccport.h memalloc.h
memdebug.o: memdebug.c area.h ccport.h errorz.h memalloc.h
memtest.o: memtest.c memalloc.h ccport.h
po01fn.o: po01fn.c optp.h parseopt.h ccport.h
po2info.o: po2info.c optp.h parseopt.h ccport.h memalloc.h zutil.h
pochklng.o: pochklng.c optp.h parseopt.h ccport.h
pochrfn.o: pochrfn.c optp.h parseopt.h ccport.h
pochrfn0.o: pochrfn0.c optp.h parseopt.h ccport.h
pochrfn1.o: pochrfn1.c optp.h parseopt.h ccport.h
poerr.o: poerr.c optp.h parseopt.h ccport.h
pohelp.o: pohelp.c optp.h parseopt.h ccport.h
pohlpfmt.o: pohlpfmt.c optp.h parseopt.h ccport.h memalloc.h zutil.h
pointfn0.o: pointfn0.c optp.h parseopt.h ccport.h
pointfn1.o: pointfn1.c optp.h parseopt.h ccport.h
polngfn0.o: polngfn0.c optp.h parseopt.h ccport.h
polngfn1.o: polngfn1.c optp.h parseopt.h ccport.h
pooptdef.o: pooptdef.c optp.h parseopt.h ccport.h memalloc.h
poparse.o: poparse.c optp.h parseopt.h ccport.h
poshift.o: poshift.c optp.h parseopt.h ccport.h
poshrfn0.o: poshrfn0.c optp.h parseopt.h ccport.h
poshrfn1.o: poshrfn1.c optp.h parseopt.h ccport.h
postrarg.o: postrarg.c optp.h parseopt.h ccport.h memalloc.h
postrfn.o: postrfn.c optp.h parseopt.h ccport.h
postvfn.o: postvfn.c optp.h parseopt.h ccport.h
potest.o: potest.c memalloc.h ccport.h parseopt.h potstchk.c \
 potstopt.c
potstchk.o: potstchk.c
potstinf.o: potstinf.c parseopt.h ccport.h potstop0.c potstchk.c
potstop0.o: potstop0.c potstchk.c
potstmk.o: potstmk.c parseopt.h ccport.h potstop0.c potstchk.c
ssadd.o: ssadd.c sspacep.h memalloc.h ccport.h strspace.h
sscat.o: sscat.c sspacep.h memalloc.h ccport.h strspace.h
ssdel.o: ssdel.c sspacep.h memalloc.h ccport.h strspace.h
ssinit.o: ssinit.c sspacep.h memalloc.h ccport.h strspace.h
ssmore.o: ssmore.c sspacep.h memalloc.h ccport.h strspace.h
sspop.o: sspop.c sspacep.h memalloc.h ccport.h strspace.h
tiadd.o: tiadd.c textidp.h area.h ccport.h memalloc.h textid.h
tidel.o: tidel.c area.h ccport.h textidp.h memalloc.h textid.h
tigetid.o: tigetid.c textidp.h area.h ccport.h memalloc.h textid.h \
 strspace.h
tiidlen.o: tiidlen.c textidp.h area.h ccport.h memalloc.h textid.h
tiidtext.o: tiidtext.c textidp.h area.h ccport.h memalloc.h textid.h
tiinit.o: tiinit.c area.h ccport.h textidp.h memalloc.h textid.h
tipop.o: tipop.c textidp.h area.h ccport.h memalloc.h textid.h
titest.o: titest.c errorz.h ccport.h textidp.h area.h memalloc.h \
 textid.h strspace.h
titxtlen.o: titxtlen.c textidp.h area.h ccport.h memalloc.h textid.h
utcesc.o: utcesc.c zutil.h ccport.h
utflfind.o: utflfind.c autobuf.h memalloc.h ccport.h osport.h zutil.h
utlnglen.o: utlnglen.c zutil.h ccport.h
utopen.o: utopen.c error.h ccport.h errorz.h zutil.h
utlg2.o: utlg2.c zutil.h ccport.h
utread.o: utread.c memalloc.h ccport.h zutil.h
utstrlo.o: utstrlo.c memalloc.h ccport.h zutil.h
utstrlon.o: utstrlon.c memalloc.h ccport.h zutil.h
utstrnst.o: utstrnst.c zutil.h ccport.h
utstrup.o: utstrup.c memalloc.h ccport.h zutil.h
utstrupn.o: utstrupn.c memalloc.h ccport.h zutil.h
utsuffix.o: utsuffix.c memalloc.h ccport.h zutil.h
utfltest.o: utfltest.c zutil.h ccport.h osport.h
vfprintf.o: vfprintf.c ccport.h
potstopt.o: potstopt.c

