#Makefile.in produced automatically using GNU-m4.
#We assume that any make variables defined on the make command-line are
#passed into a recursive make.

#Name of program.
PROGRAM=		zlex
VERSION=		1.02

#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
docdir=			$(datadir)/doc

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz



ZLEX_PATH=		../
ZLEX_SEARCH_PATH=	$(srcdir)/..

XLIBS=			-L$(builddir)/libzlex -lzlex

#SUFFIX RULES.
.SUFFIXES:

.SUFFIXES:	.o .c .y .l

.c.o:
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $<

.c:
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $< $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*


#The following targets use ZYACC_PATH and ZYACC_SKEL_DIR.  If ZYACC_PATH is
#defined, it must end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.

ZYACCFLAGS=	-d -v

.y.c:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c

.y.o:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c
	
.y:
		ZYACC_SKEL_DIR=$(ZYACC_SKEL_DIR) \
		$(ZYACC_PATH)$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c

#The following targets use ZLEX_PATH and ZLEX_SEARCH_PATH.  If ZLEX_PATH is
#defined, it must end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.
.l.c:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c

.l.o:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.l:
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c




#All human-generated files to be distributed.
SRC_FILES= \
  16bit.in1 16bit.l \
  8bit.in 8bit.l \
  backup.in backup.l \
  cecho.in cecho.l \
  chrcount.in chrcount.l \
  context1.in context1.l \
  finito.in finito.l \
  flush.in flush.l \
  huge.l \
  include.in include.in1 include.l \
  interact.in interact.l \
  intratok.in intratok.l \
  lessmore.in lessmore.l \
  linecol.in linecol.l \
  memscan.in memscan.l \
  reject1.in reject1.l \
  rejintra.in rejintra.l \
  rejunput.in rejunput.l \
  sentinel.in sentinel.l \
  ssstk.in ssstk.l \
  startalt.in startalt.l \
  unput.in unput.l \
  useract.in useract.l \
  wrap.in wrap.l \
  yylineno.in yylineno.l \
  mk16bit.c \
  dotests Makefile.m4 README

#All computer-generated files to be distributed.
NON_SRC_FILES= \
  16bit.log \
  8bit.log \
  backup.log \
  cecho.log \
  chrcount.log \
  context1.log \
  finito.log \
  flush.log \
  include.log \
  interact.log \
  intratok.log \
  lessmore.log \
  linecol.log \
  memscan.log \
  reject1.log \
  rejintra.log \
  rejunput.log \
  sentinel.log \
  ssstk.log \
  startalt.log \
  unput.log \
  useract.log \
  wrap.log \
  yylineno.log \
  Makefile.in 

#All files to be distributed.
DIST_FILES= \
  $(SRC_FILES) $(NON_SRC_FILES)

check:		huge.in huge.log 16bit.in
		./dotests

#Does only a subset of the tests.
QUICK:		huge.in huge.log 16bit.in
		QUICK_TEST=1 ./dotests

#Does only code scanners
CODE:		huge.in huge.log 16bit.in
		CODE_TEST=1 ./dotests

#Make 16bit.in from Ascii file to guard against endian switcheroos.
16bit.in:	mk16bit
		./mk16bit 16bit

#No dependency on ../dfa.c below as we don't really care.
huge.in:	
		@SRC=../dfa.c ; \
		echo Making a huge input file using $$SRC ; \
		cat $$SRC $$SRC $$SRC $$SRC $$SRC $$SRC $$SRC >tmp1.$$$$ ; \
		cat tmp1.$$$$ tmp1.$$$$ tmp1.$$$$ tmp1.$$$$ >tmp2.$$$$ ; \
		cat tmp2.$$$$ tmp2.$$$$ tmp2.$$$$ >$@ ; \
		$(RM) tmp1.$$$$ tmp2.$$$$ 

huge.log:	huge.in
		@$(LN) huge.in $@

clean:		FORCE
		$(RM) *.o core *~ *.bak t.* t[0-9]* 

distclean:	clean FORCE
		$(RM) $(TESTS) *.tst *.c huge.in huge.log Makefile *.ERR

maintainer-clean: distclean FORCE

FORCE:

#Make distribution in $(topdir)/$(DIST_DIR).
dist:		$(NON_SRC_FILES)
		@for f in $(DIST_FILES) ; \
		do \
		  $(LN) $(srcdir)/$$f $(topdir)/$(DIST_DIR)/$$f ; \
		done



Makefile.in:	Makefile.m4 FORCE
		$(MAKE_MF_IN)
