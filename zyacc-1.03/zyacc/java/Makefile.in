#Makefile.in produced automatically using GNU-m4.

#Name of program.
PROGRAM=		zyacc
VERSION=		1.03

#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where java classes are installed.
classdir=		$(prefix)/share/classes

#Path where manuals are installed (section $N in $(mandir)/man$N).
mandir=			$(prefix)/man

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
htmldir=		$(prefix)/doc/html

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
GZIP=			gzip -f
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

XLIBS=			@XLIBS@

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz



#Main target to be built in this directory.
TARGET=		zdu/zydebug/FullFrame.class


#FILE DESCRIPTIONS.
#Human-generated java files.
J_SRC_FILES= \
  zdu/zydebug/Act.java \
  zdu/zydebug/AppletFrame.java \
  zdu/zydebug/Attention.java \
  zdu/zydebug/BoundedObj.java \
  zdu/zydebug/FileCanvas.java \
  zdu/zydebug/FullFrame.java \
  zdu/zydebug/GridLocator.java \
  zdu/zydebug/GridLocatorXEnumeration.java \
  zdu/zydebug/List.java \
  zdu/zydebug/ListCanvas.java \
  zdu/zydebug/Locator.java \
  zdu/zydebug/OffsetForest.java \
  zdu/zydebug/OffsetTree.java \
  zdu/zydebug/ParseNode.java \
  zdu/zydebug/Parser.java \
  zdu/zydebug/Scanner.java \
  zdu/zydebug/ScrollPanel.java \
  zdu/zydebug/ScrollableCanvas.java \
  zdu/zydebug/Selectable.java \
  zdu/zydebug/TextCanvas.java \
  zdu/zydebug/TextLine.java \
  zdu/zydebug/TextMark.java \
  zdu/zydebug/Token.java \
  zdu/zydebug/Trace.java \
  zdu/zydebug/TraceCanvas.java \
  zdu/zydebug/Tree.java \
  zdu/zydebug/TreeCanvas.java \
  zdu/zydebug/XEnumeration.java \
  zdu/zydebug/ZYDebug.java 


#Computer-generated java files.
J_NON_SRC_FILES= 

#All Java files.
JFILES= \
  $(J_SRC_FILES) $(J_NON_SRC_FILES)


#All human-generated files to be distributed.
SRC_FILES= \
  $(J_SRC_FILES) \
  Makefile.m4 README

CLASS_FILES= \
  zdu/zydebug/Act.class \
  zdu/zydebug/AppletFrame.class \
  zdu/zydebug/Attention.class \
  zdu/zydebug/BoundedObj.class \
  zdu/zydebug/FileCanvas.class \
  zdu/zydebug/FullFrame.class \
  zdu/zydebug/GridLocator.class \
  zdu/zydebug/GridLocatorXEnumeration.class \
  zdu/zydebug/List.class \
  zdu/zydebug/ListCanvas.class \
  zdu/zydebug/Locator.class \
  zdu/zydebug/OffsetForest.class \
  zdu/zydebug/OffsetTree.class \
  zdu/zydebug/ParseNode.class \
  zdu/zydebug/Parser.class \
  zdu/zydebug/Scanner.class \
  zdu/zydebug/ScrollPanel.class \
  zdu/zydebug/ScrollableCanvas.class \
  zdu/zydebug/Selectable.class \
  zdu/zydebug/TextCanvas.class \
  zdu/zydebug/TextLine.class \
  zdu/zydebug/TextMark.class \
  zdu/zydebug/Token.class \
  zdu/zydebug/Trace.class \
  zdu/zydebug/TraceCanvas.class \
  zdu/zydebug/Tree.class \
  zdu/zydebug/TreeCanvas.class \
  zdu/zydebug/XEnumeration.class \
  zdu/zydebug/ZYDebug.class 

#All computer-generated files to be distributed.
NON_SRC_FILES= \
  $(J_NON_SRC_FILES) $(CLASS_FILES) \
  Makefile.in

#All files to be distributed.
DIST_FILES= \
  $(SRC_FILES) $(NON_SRC_FILES)


all:		$(TARGET)

$(TARGET):	$(JFILES)
		javac -depend zdu/zydebug/FullFrame.java

install:	$(TARGET) 
		@for f in $(CLASS_FILES) ; \
		do \
		  $(INSTALL_DATA) $(srcdir)/$$f $(classdir)/$$f; \
		done

uninstall:
		for f in CLASS_FILES ; \
		do \
		  $(RM) $(classdir)/$$f; \
		done

check:		$(TARGET)
		@echo No checks for java zydebug.


Makefile.in:	Makefile.m4 FORCE
		$(MAKE_MF_IN)

#CLEANING TARGETS
#Remove any garbage.
clean:		FORCE
		$(RM) *.o *~ core t.* t t[0-9]* lex.yy.c *.tmp tmp.* \
		      *.output 

#Remove all files not in distribution.
distclean:	clean FORCE
		$(RM) $(TARGET) Makefile makefile


#Remove all non-source files.  May need special tools to rebuild.
maintainer-clean: 	distclean FORCE
		$(RM) $(NON_SRC_FILES) *.bak

FORCE:



#Make distribution in $(topdir)/$(DIST_DIR).
dist:		$(NON_SRC_FILES)
		@for f in $(DIST_FILES) ; \
		do \
		  $(LN) $(srcdir)/$$f $(topdir)/$(DIST_DIR)/$$f ; \
		done




