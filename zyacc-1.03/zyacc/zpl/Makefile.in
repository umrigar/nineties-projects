#Makefile.in produced automatically using GNU-m4.

#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where java classes are installed.
classdir=		$(prefix)/share/classes

#Path where manuals are installed (section $N in $(mandir)/man$N).
mandir=			$(prefix)/man

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
htmldir=		$(prefix)/doc/html

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
GZIP=			gzip -f
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

XLIBS=			@XLIBS@

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz



ZYACC_PATH=		../src
ZYACC_SEARCH_PATH=	../src
ZLEX_LIBSRC_DIR=	/usr/local/share/zlex

LIBS=			$(ZLIBS) $(XLIBS)

#SUFFIX RULES.
.SUFFIXES:

.SUFFIXES:	.o .c .y .l

.c.o:
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $<

.c:
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $< $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*


#The following targets use ZYACC_PATH and ZYACC_SEARCH_PATH.  If ZYACC_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.

ZYACCFLAGS=	-d -v

.y.c:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c

.y.o:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.y:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c

#The following targets use ZLEX_PATH and ZLEX_SEARCH_PATH.  If ZLEX_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.
.l.c:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c

.l.o:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.l:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c




ZLEXFLAGS=	--whitespace

#Main target to be built in this directory.
TARGET=		zpl

#FILE DESCRIPTIONS.
#Human-generated C files.
C_SRC_FILES= \
  plops.c

#Computer-generated C files.
C_NON_SRC_FILES= \
  scan.c scanlib.c

#All C files.
CFILES= \
  $(C_SRC_FILES) $(C_NON_SRC_FILES)

#Human-generated header files.
H_SRC_FILES= \
  plops.h scan.h

#Computer-generated header files.
H_NON_SRC_FILES= \
  parse.h

#All header files.
HFILES= \
  $(H_SRC_FILES) $(H_NON_SRC_FILES)

#All human-generated files to be distributed.
SRC_FILES= \
  $(C_SRC_FILES) $(H_SRC_FILES) scan.l parse.y \
  Makefile.m4 NOTES.txt README test.in

#All computer-generated files to be distributed.
NON_SRC_FILES= \
  $(C_NON_SRC_FILES) $(H_NON_SRC_FILES) \
  Makefile.in DEPEND test.log

#All files to be distributed.
DIST_FILES= \
  $(SRC_FILES) $(NON_SRC_FILES)

#Object files.
OFILES= \
  parse.o scan.o plops.o scanlib.o


all:		$(TARGET)

install:
		echo "No files to be installed in this directory."
uninstall:
		echo "No files to be installed in this directory."

check:		$(TARGET)
		@echo -n "Testing $(TARGET) ... "; \
		./$(TARGET) <test.in >tmp.$$$$; \
		if cmp tmp.$$$$ test.log  >/dev/null 2>/dev/null ; \
		then \
	          echo OK; $(RM) tmp.$$$$; \
		else \
		  echo FAILURE; \
		  mv tmp.$$$$ test.ERR; \
		  echo Compare test.ERR with desired output in test.log.; \
		fi

$(TARGET):	$(OFILES) $(LIBZ_BIN)/libz.a
		$(CC) $(LDFLAGS) $(OFILES) $(LIBS) -o $@ 

#CLEANING TARGETS
#Remove any garbage.
clean:		FORCE
		$(RM) *.o *~ core t.* t t[0-9]* lex.yy.c *.tmp tmp.* \
		      *.output 

#Remove all files not in distribution.
distclean:	clean FORCE
		$(RM) $(TARGET) Makefile makefile


#Remove all non-source files.  May need special tools to rebuild.
maintainer-clean: 	distclean FORCE
		$(RM) $(NON_SRC_FILES) *.bak

FORCE:



Makefile.in:	Makefile.m4 DEPEND FORCE
		$(MAKE_MF_IN)

#We compile scan.c without $(CFLAGS) specified; this should turn off
#optimization to ensure that no library function calls get optimized out.
scanlib.c:	scan.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) $? -o fullscan.o
		$(ZLEX_LIBSRC_DIR)/mklibsrc fullscan.o $@
		$(RM) fullscan.o
		touch $@

#Dependency generation.
#Make dependencies to insert into Makefile.in.
DEPEND:		$(CFILES) $(HFILES)
		echo "#Automatically generated dependencies." >$(srcdir)/DEPEND
		$(DEPEND_CMD) $(CFILES) >>$(srcdir)/DEPEND



#Make distribution in $(topdir)/$(DIST_DIR).
dist:		$(NON_SRC_FILES)
		@for f in $(DIST_FILES) ; \
		do \
		  $(LN) $(srcdir)/$$f $(topdir)/$(DIST_DIR)/$$f ; \
		done



#All the object files depend on config.h.  Not put into automatic
#dependencies as we don't know the directory for config.h till build-time.
$(OFILES):	$(builddir)/config.h

scan.c:		scan.l
parse.c:	parse.y
parse.h:	parse.y

#Automatically generated dependencies.
plops.o: plops.c plops.h ../../libz/ccport.h scan.h ../../libz/area.h
scan.o: scan.c scan.h ../../libz/ccport.h ../../libz/error.h \
 ../../libz/errorz.h ../../libz/strspace.h ../../libz/textid.h parse.h
scanlib.o: scanlib.c


