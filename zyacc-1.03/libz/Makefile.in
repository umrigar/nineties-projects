# *** DO NOT EDIT. ***
# Automatically generated by perl from ./Makefile.p using the command:
#	./Makefile.p HDRS=area.h autobuf.h ccport.h error.c error.h errorz.h ids.h iset.h memalloc.h osport.h parseopt.h zutil.h 
#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where java classes are installed.
classdir=		$(prefix)/share/classes

#Path where manuals are installed (section $N in $(mandir)/man$N).
mandir=			$(prefix)/man

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
htmldir=		$(prefix)/doc/html

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
GZIP=			gzip -f
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

XLIBS=			@XLIBS@

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz

#SUFFIX RULES.
.SUFFIXES:

.SUFFIXES:	.o .c .y .l

.c.o:
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $<

.c:
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $< $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*


#The following targets use ZYACC_PATH and ZYACC_SEARCH_PATH.  If ZYACC_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.

ZYACCFLAGS=	-d -v

.y.c:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c

.y.o:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.y:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c

#The following targets use ZLEX_PATH and ZLEX_SEARCH_PATH.  If ZLEX_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.
.l.c:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c

.l.o:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.l:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c


########################################################################
#This section describes *ALL* files in the library.  All these files need
#not actually be distributed for a particular program.
#Main target to be built in this directory.
TARGET=		libz.a

#All C source files in library.
ALL_C_SRC_FILES= \
  arcutx.c ardel.c ardelx.c arfreeze.c argrow.c argrowx.c \
  armem.c arreset.c \
  bsadd.c bsassign.c bscomp.c bscopy.c bsdel.c bsdiff.c bsempty.c \
  bsfprint.c bshshsum.c bsinbset.c bsinit.c bsintrsc.c bsmake.c \
  bsnew.c bsnext.c bsprint.c bsrange.c bsrm.c bssize.c bssubset.c \
  bsunary.c bsunion.c \
  error.c errorz.c libzerr.c \
  freelist.c \
  htbasic.c htcursor.c htdelete.c htscope.c htstats.c \
  idsfail.c idsget.c idsinit.c idsintrn.c idslen.c idsstrng.c  \
  isadd.c isassign.c ischown.c iscomp.c iscopy.c \
  isdel.c isdiff.c isdebug.c isempty.c \
  isfprint.c ishshsum.c isiniset.c isinit.c isintrsc.c ismake.c \
  isnew.c isnext.c isprint.c isrange.c isrm.c issize.c issubset.c \
  isunary.c isunion.c  \
  memcheck.c memdebug.c \
  po01fn.c po2info.c pochklng.c pochrfn.c pochrfn0.c pochrfn1.c poerr.c \
  pohelp.c pohlpfmt.c pointfn0.c pointfn1.c \
  polngfn0.c polngfn1.c pooptdef.c \
  poparse.c poshift.c poshrfn0.c poshrfn1.c postrarg.c postrfn.c postvfn.c \
  ssadd.c sscat.c ssdel.c ssinit.c ssmore.c sspop.c  \
  tiadd.c tidel.c tigetid.c tiidlen.c tiidtext.c tiinit.c \
  titxtlen.c \
  utcesc.c utflfind.c utlnglen.c utopen.c utlg2.c utread.c \
  utstrlo.c utstrlon.c utstrnst.c utstrup.c utstrupn.c utsuffix.c \
  bstest.c \
  ertest.c \
  httest.c \
  istest.c \
  memtest.c \
  potest.c \
  titest.c \
  utfltest.c 

#All header files in library.
ALL_H_SRC_FILES= \
  area.h \
  autobuf.h \
  bset.h bsetp.h \
  error.h errorz.h \
  freelist.h \
  hashtab.h hashtabp.h \
  ids.h idsp.h \
  iset.h isetp.h \
  memalloc.h \
  optp.h parseopt.h \
  ccport.h osport.h \
  sspacep.h strspace.h  \
  textid.h textidp.h \
  xassert.h \
  zutil.h 

#All source files in library.
ALL_SRC_FILES= \
  $(ALL_C_SRC_FILES) $(ALL_H_SRC_FILES) \
  bstest.in \
  ertest.in \
  httest.in \
  istest.in \
  memtest.in \
  potest.in \
  titest.in \
  utfltest.in  \
  potstchk.c potstinf.c potstop0.c potstmk.c   \
  Makefile.p README

#All non-source files in library.
ALL_NON_SRC_FILES= \
  $(ALL_C_NON_SRC_FILES) $(ALL_H_NON_SRC_FILES) \
  bstest.log \
  ertest.log \
  httest.log \
  istest.log \
  memtest.log \
  potest.log \
  titest.log \
  utfltest.log  \
  potstopt.c  \
  Makefile.in DEPEND

ALL_DEBUG_ISET_OFILES= \
  disadd.o disassign.o dischown.o discomp.o discopy.o \
  disdel.o disdiff.o disdebug.o disempty.o \
  disfprint.o dishshsum.o disiniset.o disinit.o disintrsc.o dismake.o \
  disnew.o disnext.o disprint.o disrange.o disrm.o dissize.o dissubset.o \
  disunary.o disunion.o  

#All object files in library.
ALL_OFILES= \
  $(ALL_DEBUG_ISET_OFILES) \
  arcutx.o ardel.o ardelx.o arfreeze.o argrow.o argrowx.o \
  armem.o arreset.o \
  bsadd.o bsassign.o bscomp.o bscopy.o bsdel.o bsdiff.o bsempty.o \
  bsfprint.o bshshsum.o bsinbset.o bsinit.o bsintrsc.o bsmake.o \
  bsnew.o bsnext.o bsprint.o bsrange.o bsrm.o bssize.o bssubset.o \
  bsunary.o bsunion.o \
  error.o errorz.o libzerr.o \
  freelist.o \
  htbasic.o htcursor.o htdelete.o htscope.o htstats.o \
  idsfail.o idsget.o idsinit.o idsintrn.o idslen.o idsstrng.o  \
  isadd.o isassign.o ischown.o iscomp.o iscopy.o \
  isdel.o isdiff.o isdebug.o isempty.o \
  isfprint.o ishshsum.o isiniset.o isinit.o isintrsc.o ismake.o \
  isnew.o isnext.o isprint.o isrange.o isrm.o issize.o issubset.o \
  isunary.o isunion.o  \
  memcheck.o memdebug.o \
  po01fn.o po2info.o pochklng.o pochrfn.o pochrfn0.o pochrfn1.o poerr.o \
  pohelp.o pohlpfmt.o pointfn0.o pointfn1.o \
  polngfn0.o polngfn1.o pooptdef.o \
  poparse.o poshift.o poshrfn0.o poshrfn1.o postrarg.o postrfn.o postvfn.o \
  ssadd.o sscat.o ssdel.o ssinit.o ssmore.o sspop.o  \
  tiadd.o tidel.o tigetid.o tiidlen.o tiidtext.o tiinit.o \
  titxtlen.o \
  utcesc.o utflfind.o utlnglen.o utopen.o utlg2.o utread.o \
  utstrlo.o utstrlon.o utstrnst.o utstrup.o utstrupn.o utsuffix.o 

########################################################################
#This section describes the files actually distributed for a particular
#program.
#C source files distributed in library.
DIST_C_SRC_FILES= \
  idsfail.c idsget.c idsinit.c idsintrn.c idslen.c idsstrng.c  \
  tiadd.c tidel.c tigetid.c tiidlen.c tiidtext.c tiinit.c \
  titxtlen.c \
  ssadd.c sscat.c ssdel.c ssinit.c ssmore.c sspop.c  \
  isadd.c isassign.c ischown.c iscomp.c iscopy.c \
  isdel.c isdiff.c isdebug.c isempty.c \
  isfprint.c ishshsum.c isiniset.c isinit.c isintrsc.c ismake.c \
  isnew.c isnext.c isprint.c isrange.c isrm.c issize.c issubset.c \
  isunary.c isunion.c  \
  utcesc.c utflfind.c utlnglen.c utopen.c utlg2.c utread.c \
  utstrlo.c utstrlon.c utstrnst.c utstrup.c utstrupn.c utsuffix.c \
  arcutx.c ardel.c ardelx.c arfreeze.c argrow.c argrowx.c \
  armem.c arreset.c \
  error.c errorz.c libzerr.c \
  memcheck.c memdebug.c \
  htbasic.c htcursor.c htdelete.c htscope.c htstats.c \
  po01fn.c po2info.c pochklng.c pochrfn.c pochrfn0.c pochrfn1.c poerr.c \
  pohelp.c pohlpfmt.c pointfn0.c pointfn1.c \
  polngfn0.c polngfn1.c pooptdef.c \
  poparse.c poshift.c poshrfn0.c poshrfn1.c postrarg.c postrfn.c postvfn.c \
  freelist.c \
  titest.c \
  istest.c \
  utfltest.c \
  ertest.c \
  memtest.c \
  httest.c \
  potest.c 

#Header files distributed in library.
DIST_H_SRC_FILES= \
  ids.h idsp.h \
  textid.h textidp.h \
  sspacep.h strspace.h  \
  ccport.h osport.h \
  iset.h isetp.h \
  autobuf.h \
  zutil.h \
  area.h \
  error.h errorz.h \
  memalloc.h \
  hashtab.h hashtabp.h \
  optp.h parseopt.h \
  freelist.h 

#Source files being distributed in library.
DIST_SRC_FILES= \
  $(DIST_C_SRC_FILES) $(DIST_H_SRC_FILES) \
  titest.in \
  istest.in \
  utfltest.in \
  ertest.in \
  memtest.in \
  httest.in \
  potest.in  \
  potstchk.c potstinf.c potstop0.c potstmk.c   \
  Makefile.p README 

#Non-source files distributed in library.
DIST_NON_SRC_FILES= \
  $(DIST_C_NON_SRC_FILES) $(DIST_H_NON_SRC_FILES) \
  titest.log \
  istest.log \
  utfltest.log \
  ertest.log \
  memtest.log \
  httest.log \
  potest.log  \
  potstopt.c  \
  Makefile.in DEPEND

DEBUG_ISET_OFILES= $(ALL_DEBUG_ISET_OFILES)

#Object files to be compiled into distributed library.
DIST_OFILES= \
  $(DEBUG_ISET_OFILES) \
  idsfail.o idsget.o idsinit.o idsintrn.o idslen.o idsstrng.o  \
  tiadd.o tidel.o tigetid.o tiidlen.o tiidtext.o tiinit.o \
  titxtlen.o \
  ssadd.o sscat.o ssdel.o ssinit.o ssmore.o sspop.o  \
  isadd.o isassign.o ischown.o iscomp.o iscopy.o \
  isdel.o isdiff.o isdebug.o isempty.o \
  isfprint.o ishshsum.o isiniset.o isinit.o isintrsc.o ismake.o \
  isnew.o isnext.o isprint.o isrange.o isrm.o issize.o issubset.o \
  isunary.o isunion.o  \
  utcesc.o utflfind.o utlnglen.o utopen.o utlg2.o utread.o \
  utstrlo.o utstrlon.o utstrnst.o utstrup.o utstrupn.o utsuffix.o \
  arcutx.o ardel.o ardelx.o arfreeze.o argrow.o argrowx.o \
  armem.o arreset.o \
  error.o errorz.o libzerr.o \
  memcheck.o memdebug.o \
  htbasic.o htcursor.o htdelete.o htscope.o htstats.o \
  po01fn.o po2info.o pochklng.o pochrfn.o pochrfn0.o pochrfn1.o poerr.o \
  pohelp.o pohlpfmt.o pointfn0.o pointfn1.o \
  polngfn0.o polngfn1.o pooptdef.o \
  poparse.o poshift.o poshrfn0.o poshrfn1.o postrarg.o postrfn.o postvfn.o \
  freelist.o 

#Tests to be run in distributed library.
DIST_TESTS= \
  titest \
  istest \
  utfltest \
  ertest \
  memtest \
  httest \
  potest 

#All files to be distributed.
DIST_FILES= \
  $(DIST_SRC_FILES) $(DIST_NON_SRC_FILES)

#PUBLIC TARGETS
all:		$(TARGET)

install:	$(TARGET)
		echo Nothing to be installed for libz.

uninstall:
		echo Nothing to be uninstalled for libz.

$(TARGET):	$(DIST_OFILES)
		$(AR) r $@ $?
		$(RANLIB) $@

#Use this target to build the entire library when all source files are present.
all_libz:	$(ALL_OFILES)
		$(AR) r $@ $?
		$(RANLIB) $@

check:		$(DIST_TESTS) 
		@-for t in $(DIST_TESTS) ; \
		do \
		  echo -n Checking $$t ... ; \
		  FIND_FILE_PATH=/usr/include \
                  MEM_DEBUG_LOG=memdebug.log \
                    ./$$t $$t.in <$$t.in >tmp1.$$$$ 2>tmp2.$$$$ ; \
		  cat tmp1.$$$$ tmp2.$$$$ >tmp.$$$$ ; \
		  $(RM) tmp1.$$$$ tmp2.$$$$ ; \
		  if test $$t = memtest ; \
		  then \
                    cat memdebug.log tmp.$$$$ >tmp1.$$$$ ; \
		    sed -e "s/\`[0-9a-fA-FxX]*'/\`PTR'/" \
			tmp1.$$$$ >tmp.$$$$ ; \
		    $(RM) tmp1.$$$$ ; \
		  fi ; \
		  if cmp $$t.log tmp.$$$$ >/dev/null 2>/dev/null ; \
		  then \
		    echo OK; $(RM) tmp.$$$$ ; \
		  else \
		    echo FAILED. ; \
		    if test -f $$t.msg ; \
		    then \
		      cat $$t.msg ; \
		    fi ; \
		    mv tmp.$$$$ $$t.ERR ; \
		    echo Suggest diff\'ing erroneous log in $$t.ERR with \
			 expected log in $$t.log. ; \
		  fi ; \
		done

potstinf:	potstinf.o
		$(CC) $(LDFLAGS) potstinf.o $(ZLIBS) $(XLIBS)  -o $@ 

potstmk:	potstmk.o
		$(CC) $(LDFLAGS) potstmk.o $(ZLIBS) $(XLIBS)  -o $@ 

potstopt.c:	potstmk
		./potstmk >$@

#All the object files depend on config.h.  Not put into automatic
#dependencies as we don't know the directory for config.h till build-time.
$(DIST_OFILES):	$(builddir)/config.h

$(ALL_OFILES):  $(builddir)/config.h

$(DIST_TESTS):	$(TARGET)

#Manual dependencies for DEBUG_ISET_OFILES.
$(DEBUG_ISET_OFILES):	iset.h isetp.h
disadd.o:		isadd.c
disassign.o:		isassign.c
dischown.o:		ischown.c
discomp.o:		iscomp.c
discopy.o:		iscopy.c
disdel.o:		isdel.c
disdiff.o:		isdiff.c
disdebug.o:		isdebug.c
disempty.o:		isempty.c
disfprint.o:		isfprint.c
dishshsum.o:		ishshsum.c
disiniset.o:		isiniset.c
disinit.o:		isinit.c
disintrsc.o:		isintrsc.c
dismake.o:		ismake.c
disnew.o:		isnew.c
disnext.o:		isnext.c
disprint.o:		isprint.c
disrange.o:		isrange.c
disrm.o:		isrm.c
dissize.o:		issize.c
dissubset.o:		issubset.c
disunary.o:		isunary.c
disunion.o:		isunion.c
$(DEBUG_ISET_OFILES):
			@debugCFile=`basename $@ '.o'`.c; \
			srcCFile=`echo $@ | sed 's/^.//;s/o$$/c/'`; \
			echo making $@ from $$srcCFile ; \
			$(LN) $$srcCFile $$debugCFile; \
			$(CC) -c $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) \
			    -DDEBUG_ISET $(DFLAGS) $$debugCFile; \
			$(RM) $$debugCFile

#Make dependencies to insert into Makefile.in.
DEPEND:		$(DIST_C_SRC_FILES) $(DIST_C_NON_SRC_FILES) $(DIST_H_SRC_FILES)
		echo "#Automatically generated dependencies." >$(srcdir)/DEPEND
		$(DEPEND_CMD) $(DIST_C_SRC_FILES) $(DIST_C_NON_SRC_FILES) \
		  >>$(srcdir)/DEPEND

#Make makefile.in from this file.
Makefile.in:	Makefile.p DEPEND FORCE
		$(srcdir)/Makefile.p HDRS="$(HDRS)" >$@

#Make distribution.
dist:		$(DIST_NON_SRC_FILES)
		@for f in $(DIST_FILES) ; \
		do \
		  $(LN) $(srcdir)/$$f $(topdir)/$(DIST_DIR)/$$f ; \
		done

#CLEANING TARGETS
#Remove any garbage.
clean:		FORCE
		$(RM) *.o *~ core t.* t t[0-9]* lex.yy.c *.tmp tmp.* \
		      *.output 

#Remove all files not in distribution.
distclean:	clean FORCE
		$(RM) $(TARGET) Makefile makefile


#Remove all non-source files.  May need special tools to rebuild.
maintainer-clean: 	distclean FORCE
		$(RM) $(NON_SRC_FILES) *.bak

FORCE:

#Automatically generated dependencies.
utcesc.o: utcesc.c zutil.h ccport.h
utflfind.o: utflfind.c autobuf.h memalloc.h ccport.h osport.h zutil.h
utlnglen.o: utlnglen.c zutil.h ccport.h
utopen.o: utopen.c error.h ccport.h errorz.h zutil.h
utlg2.o: utlg2.c zutil.h ccport.h
utread.o: utread.c memalloc.h ccport.h zutil.h
utstrlo.o: utstrlo.c memalloc.h ccport.h zutil.h
utstrlon.o: utstrlon.c memalloc.h ccport.h zutil.h
utstrnst.o: utstrnst.c zutil.h ccport.h
utstrup.o: utstrup.c memalloc.h ccport.h zutil.h
utstrupn.o: utstrupn.c memalloc.h ccport.h zutil.h
utsuffix.o: utsuffix.c memalloc.h ccport.h zutil.h
idsfail.o: idsfail.c idsp.h ids.h ccport.h strspace.h textid.h
idsget.o: idsget.c idsp.h ids.h ccport.h strspace.h textid.h
idsinit.o: idsinit.c idsp.h ids.h ccport.h strspace.h textid.h
idsintrn.o: idsintrn.c idsp.h ids.h ccport.h strspace.h textid.h
idslen.o: idslen.c idsp.h ids.h ccport.h strspace.h textid.h
idsstrng.o: idsstrng.c idsp.h ids.h ccport.h strspace.h textid.h
arcutx.o: arcutx.c area.h ccport.h memalloc.h
ardel.o: ardel.c area.h ccport.h memalloc.h
ardelx.o: ardelx.c area.h ccport.h memalloc.h
arfreeze.o: arfreeze.c area.h ccport.h memalloc.h
argrow.o: argrow.c area.h ccport.h errorz.h memalloc.h
argrowx.o: argrowx.c area.h ccport.h errorz.h memalloc.h
armem.o: armem.c area.h ccport.h memalloc.h
arreset.o: arreset.c area.h ccport.h memalloc.h
tiadd.o: tiadd.c hashtab.h ccport.h textidp.h area.h memalloc.h \
 textid.h
tidel.o: tidel.c area.h ccport.h textidp.h hashtab.h memalloc.h \
 textid.h
tigetid.o: tigetid.c textidp.h area.h ccport.h hashtab.h memalloc.h \
 textid.h strspace.h
tiidlen.o: tiidlen.c textidp.h area.h ccport.h hashtab.h memalloc.h \
 textid.h
tiidtext.o: tiidtext.c textidp.h area.h ccport.h hashtab.h memalloc.h \
 textid.h
tiinit.o: tiinit.c area.h ccport.h hashtab.h textidp.h memalloc.h \
 textid.h
titxtlen.o: titxtlen.c textidp.h area.h ccport.h hashtab.h memalloc.h \
 textid.h
memcheck.o: memcheck.c memalloc.h ccport.h
memdebug.o: memdebug.c memalloc.h ccport.h
error.o: error.c error.h ccport.h errorz.h
errorz.o: errorz.c autobuf.h memalloc.h ccport.h errorz.h
libzerr.o: libzerr.c errorz.h ccport.h
htbasic.o: htbasic.c area.h ccport.h hashtabp.h hashtab.h memalloc.h \
 zutil.h
htcursor.o: htcursor.c area.h ccport.h hashtabp.h hashtab.h
htdelete.o: htdelete.c hashtabp.h hashtab.h ccport.h area.h
htscope.o: htscope.c area.h ccport.h hashtabp.h hashtab.h
htstats.o: htstats.c hashtabp.h hashtab.h ccport.h area.h memalloc.h
ssadd.o: ssadd.c sspacep.h memalloc.h ccport.h strspace.h
sscat.o: sscat.c sspacep.h memalloc.h ccport.h strspace.h
ssdel.o: ssdel.c sspacep.h memalloc.h ccport.h strspace.h
ssinit.o: ssinit.c sspacep.h memalloc.h ccport.h strspace.h
ssmore.o: ssmore.c sspacep.h memalloc.h ccport.h strspace.h
sspop.o: sspop.c sspacep.h memalloc.h ccport.h strspace.h
po01fn.o: po01fn.c optp.h parseopt.h ccport.h
po2info.o: po2info.c optp.h parseopt.h ccport.h memalloc.h zutil.h
pochklng.o: pochklng.c optp.h parseopt.h ccport.h
pochrfn.o: pochrfn.c optp.h parseopt.h ccport.h
pochrfn0.o: pochrfn0.c optp.h parseopt.h ccport.h
pochrfn1.o: pochrfn1.c optp.h parseopt.h ccport.h
poerr.o: poerr.c optp.h parseopt.h ccport.h
pohelp.o: pohelp.c optp.h parseopt.h ccport.h
pohlpfmt.o: pohlpfmt.c optp.h parseopt.h ccport.h memalloc.h zutil.h
pointfn0.o: pointfn0.c optp.h parseopt.h ccport.h
pointfn1.o: pointfn1.c optp.h parseopt.h ccport.h
polngfn0.o: polngfn0.c optp.h parseopt.h ccport.h
polngfn1.o: polngfn1.c optp.h parseopt.h ccport.h
pooptdef.o: pooptdef.c optp.h parseopt.h ccport.h memalloc.h
poparse.o: poparse.c optp.h parseopt.h ccport.h
poshift.o: poshift.c optp.h parseopt.h ccport.h
poshrfn0.o: poshrfn0.c optp.h parseopt.h ccport.h
poshrfn1.o: poshrfn1.c optp.h parseopt.h ccport.h
postrarg.o: postrarg.c optp.h parseopt.h ccport.h memalloc.h
postrfn.o: postrfn.c optp.h parseopt.h ccport.h
postvfn.o: postvfn.c optp.h parseopt.h ccport.h
utfltest.o: utfltest.c zutil.h ccport.h osport.h
titest.o: titest.c errorz.h ccport.h hashtab.h textidp.h area.h \
 memalloc.h textid.h strspace.h
memtest.o: memtest.c memalloc.h ccport.h
ertest.o: ertest.c errorz.h ccport.h
httest.o: httest.c hashtabp.h hashtab.h ccport.h area.h memalloc.h
potest.o: potest.c memalloc.h ccport.h parseopt.h potstchk.c \
 potstopt.c
