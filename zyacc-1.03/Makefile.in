#Makefile.in produced automatically using GNU-m4.
#We assume that any make variables defined on the make command-line are
#passed into a recursive make.

PROGRAM=	zyacc
VERSION=	1.03

#DIRECTORIES FOR SOURCES AND BUILD.
#Source directory controlled by this makefile.
srcdir=			@srcdir@

#Define VPATH to ensure that source files found even if build directory is
#different from srcdir.
VPATH=			@srcdir@

#Top-level source directory for entire package.
topdir=			@top_srcdir@

#Top-level build directory for package.
builddir=		@builddir@

#INSTALLATION PATHS.
#Prefix of path where all architecture-independent files are installed.
prefix=			@prefix@

#Prefix of path where architecture-dependent files are installed.
exec_prefix=		@exec_prefix@

#Path where executables are installed.
bindir=			$(exec_prefix)/bin

#Path where skeleton file and library sources are installed.
datadir=		$(prefix)/share/$(PROGRAM)

#Path where include files are installed.
includedir=		$(prefix)/include

#Path where info files are installed.
infodir=		$(prefix)/info

#Path where libraries are installed.
libdir=			$(exec_prefix)/lib

#Path where java classes are installed.
classdir=		$(prefix)/share/classes

#Path where manuals are installed (section $N in $(mandir)/man$N).
mandir=			$(prefix)/man

#Path where library sources and skeleton are installed.
libsrcdir=		$(datadir)

#Path where html files are installed.
htmldir=		$(prefix)/doc/html

SHELL=			/bin/sh
RM=			rm -f
AR=			ar
LN=			ln -f
MV=			mv
CAT=			cat
CMP=			cmp
SED=			sed
GZIP=			gzip -f
DEPEND_CMD=		gcc -MM $(CPPFLAGS) $(DFLAGS)
MAKE_MF_IN=		$(GM4) --include=$(topdir)/mf \
		        Makefile.m4 >$(srcdir)/Makefile.in
MAKEINFO=		makeinfo
TEXI2DVI=		texi2dvi
TEXI2HTML=		texi2html
DVI2PS=			dvips
GM4=			gm4 --prefix-builtins
RANLIB=			@RANLIB@
INSTALL=		@INSTALL@
INSTALL_PROGRAM=	@INSTALL_PROGRAM@
INSTALL_DATA=		@INSTALL_DATA@
ZLEX=			zlex
ZYACC=			zyacc
ZYACCFLAGS=
ZLEXFLAGS=


#COMPILER CONTROL
#Make variables which define compiler invocation.
CC=			@CC@

#Flags to control optimization/debugging.
CFLAGS=			@CFLAGS@

#Header file search directory and other misc. options for cpp/cc.
CPPFLAGS=		-I$(srcdir) -I$(LIBZ_SRC) -I$(builddir)

#Extra debugging and optimization options for the C compiler.
CXXFLAGS=		@CXXFLAGS@

#-D options passed to the C-compiler by configure.
DEFS=			@DEFS@

#Compose DEFFLAGS as combination of above (plus others if needed).
#XFLAGS should be project or directory specific flags. DFLAGS are
#intended to be passed in via the command-line; 
DEFFLAGS=		$(DEFS) $(XFLAGS) $(DFLAGS)

#Library search used.
ZLIBS=			-L$(LIBZ_BIN) -lz

XLIBS=			@XLIBS@

LDFLAGS=		@LDFLAGS@

@SET_MAKE@

#Flags to be passed down to recursive compilation makes; 
#many makes don't do it correctly thru the environment.
REC_MAKE_FLAGS=	\
  CFLAGS='$(CFLAGS)' \
  DFLAGS='$(DFLAGS)' \
  PROGRAM='$(PROGRAM)' \
  VERSION='$(VERSION)' \
  SIGNATURE='Zerksis'

REC_MAKE=	$(MAKE) $(REC_MAKE_FLAGS)

#This ends the configuration section.

#The libz directory is a sibling of the main package directory.
LIBZ_SRC=		$(topdir)/libz
LIBZ_BIN=		$(builddir)/libz



#SUFFIX RULES.
.SUFFIXES:

.SUFFIXES:	.o .c .y .l

.c.o:
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $<

.c:
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $< $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*


#The following targets use ZYACC_PATH and ZYACC_SEARCH_PATH.  If ZYACC_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.

ZYACCFLAGS=	-d -v

.y.c:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c

.y.o:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.y:
		if test -z "$(ZYACC_PATH)"; then sep=""; else sep="/"; fi; \
		ZYACC_SEARCH_PATH=$(ZYACC_SEARCH_PATH) \
		$(ZYACC_PATH)$${sep}$(ZYACC) $(ZYACCFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c

#The following targets use ZLEX_PATH and ZLEX_SEARCH_PATH.  If ZLEX_PATH is
#defined, it should not end with a '/'.  If it is not defined the current $PATH
#is used to search for zyacc.
.l.c:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c

.l.o:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c

.l:
		if test -z "$(ZLEX_PATH)"; then sep=""; else sep="/"; fi; \
		ZLEX_SEARCH_PATH=$(ZLEX_SEARCH_PATH) \
		$(ZLEX_PATH)$${sep}$(ZLEX) $(ZLEXFLAGS) $< -o $*.c
		$(CC) $(CPPFLAGS) $(CXXFLAGS) $(DEFFLAGS) \
		      $(CFLAGS) $*.c $(ZLIBS) $(XLIBS) $(LDFLAGS) -o $*
		$(RM) $*.c




SRC_FILES= \
  Makefile.m4 \
  acconfig.h aclocal.m4 configure.in id914 \
  zyacc/refs.bib \
  install-sh mkinstalldirs install-chk mk-mf_in \
  COPYING GPL README INSTALL INSTALL.zyacc CHANGES TODO \
  mf/*.mf 


NON_SRC_FILES= \
  Makefile.in config.h.in configure zyacc/c2tex/c2tex.c
DIST_FILES= \
  $(SRC_FILES) $(NON_SRC_FILES)

PRG_DIR=		zyacc/src

#Directories to be built in normal build.
BUILD_DIRS=		libz zyacc/libzyacc zyacc/src

#Directory containing documentation.  Not normally built.
DOC_DIR=		zyacc/doc

#Directories which contain normal installation checks.
CHECK_DIRS=		zyacc/src

#Directories which need to be cleaned from top-level.
CLEAN_DIRS=		zyacc/doc zyacc/libzyacc zyacc/src 

#Directories which contain dependency information.
DEPEND_DIRS=		 libz zyacc/zpl zyacc/libzyacc zyacc/src zyacc/c2tex

#Directories which contain distribution.
DIST_DIRS=		zyacc/doc libz zyacc/zpl zyacc/src zyacc/src/tests \
			zyacc/libzyacc zyacc/c2tex zyacc/java

#Directories which contain installation targets.
INSTALL_DIRS=		zyacc/libzyacc zyacc/src zyacc/java zyacc/doc 

#Directories with Makefile.m4 files which need to be converted to Makefile.in.
MAKE_DIRS=		zyacc/doc libz zyacc/zpl zyacc/libzyacc zyacc/src \
			zyacc/src/tests zyacc/c2tex zyacc/java

DIST_NAME=		$(PROGRAM)-$(VERSION)
DIST_MIN_DOC_NAME=	$(PROGRAM)-$(VERSION)-min-doc

#PUBLIC TARGETS.

all:		
		@for d in $(BUILD_DIRS) ; \
		do \
		  echo Making in directory $$d ; \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done

doc:
		cd $(DOC_DIR) ; $(REC_MAKE)

install:	installdirs
		@for d in $(INSTALL_DIRS) ; \
		do \
		  echo installing files from directory $$d ; \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done
	
uninstall:
		@for d in $(INSTALL_DIRS) ; \
		do \
		  echo uninstalling files from directory $$d ; \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done

check:
		@for d in $(CHECK_DIRS) ; \
		do \
		  echo Checking directory $$d ; \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done



clean:		FORCE
		$(RM) *.o core *~ t t.? t[0-9]* tmp tmp.* tmp[0-9]* *.tmp \
			*.output
		for d in $(CLEAN_DIRS) ; \
		do \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done

distclean:	clean FORCE
		$(RM) config.h config.log \
		      config.cache config.status Makefile makefile stamp-h
		@for d in $(CLEAN_DIRS) ; \
		do \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done

maintainer-clean: distclean FORCE
		$(RM) $(NON_SRC_FILES)
		@for d in $(CLEAN_DIRS) ; \
		do \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done

FORCE:

installdirs:	mkinstalldirs
		$(srcdir)/mkinstalldirs $(bindir) $(datadir) $(libdir) \
		           $(libsrcdir) $(infodir) $(htmldir) \
			   $(classdir)/zdu/zydebug

#We should really check HDRS in c2tex directory too, but for the moment,
#things work, cause zyacc requires all the modules c2tex requires.
Makefile.in:	Makefile.m4 FORCE
		$(MAKE_MF_IN)
		HDRS=`( cd $(PRG_DIR) ; $(REC_MAKE) libzhdr ) \
                | sed -n 's/LIBZ:[	]*//p'` ; \
		for d in $(MAKE_DIRS) ; \
		do \
		  ( cd $$d ; $(REC_MAKE) HDRS="$$HDRS" $@ ) ; \
		done

dist:		doc
		$(REC_MAKE)
		$(RM) -r $(DIST_NAME) 
		mkdir $(DIST_NAME)
		@for d in $(DIST_DIRS) ; \
		do \
		  $(srcdir)/mkinstalldirs $(DIST_NAME)/$$d ; \
		done 
		@$(srcdir)/mkinstalldirs $(DIST_NAME)/mf \
		  $(DIST_NAME)/zyacc/c2tex \
		  $(DIST_NAME)/zyacc/doc/examples \
		  $(DIST_NAME)/zyacc/java/zdu/zydebug
		@echo Making distribution for top-level files.
		@for f in $(DIST_FILES) ; \
		do \
		  cp $$f $(DIST_NAME)/$$f ; \
		done
		@HDRS=`( cd $(PRG_DIR) ; $(REC_MAKE) libzhdr ) \
                | sed -n 's/LIBZ:[	]*//p'` ; \
		for d in $(DIST_DIRS) ; \
		do \
		  echo Making distribution for subdirectory $$d. ; \
		  (cd $$d ; \
		   $(REC_MAKE) HDRS="$$HDRS" \
			DIST_DIR=$(DIST_NAME)/$$d dist ) ; \
		done
		@echo Making distribution tar file.
		@tar cf $(DIST_NAME).tar $(DIST_NAME)
		@$(RM) -r $(DIST_NAME)
		@$(GZIP) $(DIST_NAME).tar
		@echo Distribution in $(DIST_NAME).tar.gz

dist-min-doc:
		$(REC_MAKE)
		$(RM) -r $(DIST_MIN_DOC_NAME) 
		mkdir $(DIST_MIN_DOC_NAME)
		@for d in $(DIST_DIRS) ; \
		do \
		  $(srcdir)/mkinstalldirs $(DIST_MIN_DOC_NAME)/$$d ; \
		done 
		@$(srcdir)/mkinstalldirs $(DIST_MIN_DOC_NAME)/mf \
		  $(DIST_MIN_DOC_NAME)/zyacc/c2tex \
		  $(DIST_MIN_DOC_NAME)/zyacc/doc/examples \
		  $(DIST_MIN_DOC_NAME)/zyacc/java/zdu/zydebug
		@echo Making distribution for top-level files.
		@for f in $(DIST_FILES) ; \
		do \
		  cp $$f $(DIST_MIN_DOC_NAME)/$$f ; \
		done
		@HDRS=`( cd $(PRG_DIR) ; $(REC_MAKE) libzhdr ) \
                | sed -n 's/LIBZ:[	]*//p'` ; \
		for d in $(DIST_DIRS) ; \
		do \
		  echo Making distribution for subdirectory $$d. ; \
		  if test $$d = "zyacc/doc" ; \
		  then target="dist-min-doc" ; \
		  else target="dist" ; \
		  fi; \
		  (cd $$d ; \
		   $(REC_MAKE) HDRS="$$HDRS" \
			DIST_DIR=$(DIST_MIN_DOC_NAME)/$$d $$target ) ; \
		done
		@echo Making distribution tar file.
		@tar cf $(DIST_MIN_DOC_NAME).tar $(DIST_MIN_DOC_NAME)
		@$(RM) -r $(DIST_MIN_DOC_NAME)
		@$(GZIP) $(DIST_MIN_DOC_NAME).tar
		@echo Distribution in $(DIST_MIN_DOC_NAME).tar.gz

DEPEND:
		for d in $(DEPEND_DIRS) ; \
		do \
		  ( cd $$d ; $(REC_MAKE) $@ ) ; \
		done


#CONFIGURATION TARGETS
CONFIGURE:	$(srcdir)/configure $(srcdir)/config.h.in

${srcdir}/configure: configure.in aclocal.m4
		cd ${srcdir} && autoconf
     
#autoheader might not change config.h.in, so touch a stamp file.
${srcdir}/config.h.in: stamp-h.in
stamp-h.in:	configure.in aclocal.m4 acconfig.h
		cd ${srcdir} && autoheader
		echo timestamp > stamp-h.in
     
config.h:	stamp-h
stamp-h:	config.h.in config.status
		./config.status

#This rule acts weird --- omit for the time being.     
#Makefile:	Makefile.in config.status
#		./config.status
     
config.status: configure
		./config.status --recheck


#This target sets up symbolic links so that package specific files in
#the top-level directory can be referred to using generic names.
#Call as 'make PACKAGE=package setup-package', to setup the top-directory
#for package.

setup-package:
		for f in *.$(PACKAGE) ; \
                do \
		  $(LN) -s $$f `basename $$f .$(PACKAGE)` ; \
		done
		autoheader; autoconf
		$(MAKE_MF_IN)
		./configure

